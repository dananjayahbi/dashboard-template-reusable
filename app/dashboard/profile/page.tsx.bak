'use client';

import { useState } from 'react';
import {
  Box,
  Grid,
  Paper,
  Avatar,
  Typography,
  TextField,
  Button,
  Divider,
  Tabs,
  Tab,
  IconButton,
  Alert,
  Skeleton,
  CircularProgress,
  Container,
  Card,
  CardContent,
  Stack,
  Chip,
} from '@mui/material';
import {
  Edit as EditIcon,
  Save as SaveIcon,
  Cancel as CancelIcon,
  CameraAlt as CameraIcon,
  SecurityOutlined as SecurityIcon,
  Person as PersonIcon,
  NotificationsOutlined as NotificationsIcon,
  Email as EmailIcon,
  Phone as PhoneIcon,
  LocationOn as LocationIcon,
  CalendarToday as CalendarIcon,
} from '@mui/icons-material';
import PageHeader from '../../components/layout/PageHeader';
import { UserRole } from '../../types/auth';

// Interface for tab panel props
interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

// Mock user data
const mockUser = {
  id: '1',
  firstName: 'John',
  lastName: 'Doe',
  email: 'john.doe@example.com',
  role: UserRole.ADMIN,
  createdAt: '2023-01-15T00:00:00Z',
  avatarUrl: 'https://mui.com/static/images/avatar/1.jpg',
  bio: 'Software engineer with 10+ years of experience in web development.',
  phone: '+1 (555) 123-4567',
  location: 'San Francisco, CA'
};

// Tab Panel component
function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`profile-tabpanel-${index}`}
      aria-labelledby={`profile-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

// Function to get tab accessibility props
function a11yProps(index: number) {
  return {
    id: `profile-tab-${index}`,
    'aria-controls': `profile-tabpanel-${index}`,
  };
}

export default function ProfilePage() {
  const [value, setValue] = useState(0);
  const [isEditing, setIsEditing] = useState(false);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState<{ type: 'success' | 'error'; text: string } | null>(null);
  const [profileData, setProfileData] = useState({
    firstName: mockUser.firstName,
    lastName: mockUser.lastName,
    email: mockUser.email,
    bio: mockUser.bio,
    phone: mockUser.phone,
    location: mockUser.location,
  });

  const handleChange = (event: React.SyntheticEvent, newValue: number) => {
    setValue(newValue);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setProfileData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleEdit = () => {
    setIsEditing(true);
  };

  const handleCancel = () => {
    // Reset form data to original values
    setProfileData({
      firstName: mockUser.firstName,
      lastName: mockUser.lastName,
      email: mockUser.email,
      bio: mockUser.bio,
      phone: mockUser.phone,
      location: mockUser.location,
    });
    setIsEditing(false);
    setMessage(null);
  };

  const handleSave = async () => {
    try {
      setLoading(true);
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Show success message
      setMessage({
        type: 'success',
        text: 'Profile updated successfully!'
      });
      
      setIsEditing(false);
    } catch (error) {
      setMessage({
        type: 'error',
        text: 'Failed to update profile. Please try again.'
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Container maxWidth="lg" sx={{ pb: 5 }}>
      <PageHeader
        title="My Profile"
        subtitle="View and update your profile information"
        breadcrumbs={[
          { href: '/dashboard', label: 'Dashboard' },
          { href: '/dashboard/profile', label: 'Profile' },
        ]}
      />

      {message && (
        <Alert 
          severity={message.type} 
          sx={{ mb: 3 }}
          onClose={() => setMessage(null)}
        >
          {message.text}
        </Alert>
      )}
        <Grid container spacing={4}>
        {/* Profile Summary Card */}
        <Grid item xs={12} md={4} lg={4}>
          <Card sx={{ borderRadius: 2, boxShadow: 3, height: '100%', overflow: 'visible' }}
            <Box sx={{ position: 'relative' }}>
              {/* Cover Image */}
              <Box 
                sx={{ 
                  height: 120, 
                  backgroundColor: 'primary.main', 
                  borderTopLeftRadius: 8,
                  borderTopRightRadius: 8,
                  backgroundImage: 'linear-gradient(to right, rgba(25, 118, 210, 1), rgba(25, 118, 210, 0.7))',
                }}
              />
              
              {/* Avatar */}
              <Avatar
                src={mockUser.avatarUrl}
                alt={`${mockUser.firstName} ${mockUser.lastName}`}
                sx={{ 
                  width: 120, 
                  height: 120,
                  position: 'absolute',
                  top: 60,
                  left: '50%',
                  transform: 'translateX(-50%)',
                  border: '4px solid white',
                  boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
                }}
              />
              
              {/* Camera Button */}
              <IconButton
                size="small"
                sx={{
                  position: 'absolute',
                  bottom: -65,
                  right: '50%',
                  marginRight: -75,
                  backgroundColor: 'primary.main',
                  color: 'white',
                  '&:hover': {
                    backgroundColor: 'primary.dark',
                  },
                  width: 36,
                  height: 36,
                  boxShadow: 1
                }}
              >
                <CameraIcon fontSize="small" />
              </IconButton>
            </Box>
            
            {/* Profile Info */}
            <CardContent sx={{ pt: 8, pb: 3, px: 3, textAlign: 'center' }}>
              <Typography variant="h5" fontWeight="500" gutterBottom>
                {`${mockUser.firstName} ${mockUser.lastName}`}
              </Typography>
              
              <Chip 
                label={mockUser.role}
                color="primary"
                size="small"
                sx={{ 
                  mt: 1, 
                  mb: 2, 
                  textTransform: 'uppercase',
                  fontWeight: 500
                }} 
              />
              
              <Typography variant="body2" color="text.secondary" sx={{ mb: 3, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                <EmailIcon fontSize="small" sx={{ mr: 1, opacity: 0.7 }} />
                {mockUser.email}
              </Typography>
              
              <Divider sx={{ mb: 3 }} />
              
              <Stack spacing={2} sx={{ alignItems: 'flex-start' }}>
                <Box sx={{ display: 'flex', alignItems: 'center' }}>
                  <CalendarIcon color="primary" sx={{ mr: 2, opacity: 0.7 }} />
                  <Box>
                    <Typography variant="caption" color="text.secondary">MEMBER SINCE</Typography>
                    <Typography variant="body2">{new Date(mockUser.createdAt).toLocaleDateString()}</Typography>
                  </Box>
                </Box>
                
                <Box sx={{ display: 'flex', alignItems: 'center' }}>
                  <LocationIcon color="primary" sx={{ mr: 2, opacity: 0.7 }} />
                  <Box>
                    <Typography variant="caption" color="text.secondary">LOCATION</Typography>
                    <Typography variant="body2">{mockUser.location}</Typography>
                  </Box>
                </Box>
                
                <Box sx={{ display: 'flex', alignItems: 'center' }}>
                  <PhoneIcon color="primary" sx={{ mr: 2, opacity: 0.7 }} />
                  <Box>
                    <Typography variant="caption" color="text.secondary">PHONE</Typography>
                    <Typography variant="body2">{mockUser.phone}</Typography>
                  </Box>
                </Box>
              </Stack>
            </CardContent>
          </Card>
        </Grid>

        {/* Profile Details and Settings */}
        <Grid item xs={12} md={8}>
          <Card sx={{ borderRadius: 2, boxShadow: 3, overflow: 'hidden' }}>
            <Box sx={{ borderBottom: 1, borderColor: 'divider', bgcolor: 'background.paper' }}>
              <Tabs
                value={value}
                onChange={handleChange}
                aria-label="profile tabs"
                variant="fullWidth"
                sx={{
                  '& .MuiTab-root': {
                    minHeight: 64,
                    fontWeight: 500
                  }
                }}
              >
                <Tab 
                  label="Personal Info" 
                  icon={<PersonIcon />} 
                  iconPosition="start" 
                  {...a11yProps(0)} 
                />
                <Tab 
                  label="Security" 
                  icon={<SecurityIcon />} 
                  iconPosition="start" 
                  {...a11yProps(1)} 
                />
                <Tab 
                  label="Notifications" 
                  icon={<NotificationsIcon />} 
                  iconPosition="start" 
                  {...a11yProps(2)} 
                />
              </Tabs>
            </Box>
            
            <TabPanel value={value} index={0}>
              <Box>
                <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 3 }}>
                  {!isEditing ? (
                    <Button
                      startIcon={<EditIcon />}
                      onClick={handleEdit}
                      variant="contained"
                      color="primary"
                    >
                      Edit Profile
                    </Button>
                  ) : (
                    <Stack direction="row" spacing={2}>
                      <Button
                        startIcon={<CancelIcon />}
                        onClick={handleCancel}
                        variant="outlined"
                        color="error"
                      >
                        Cancel
                      </Button>
                      <Button
                        startIcon={loading ? <CircularProgress size={20} /> : <SaveIcon />}
                        onClick={handleSave}
                        variant="contained"
                        disabled={loading}
                      >
                        {loading ? 'Saving...' : 'Save Changes'}
                      </Button>
                    </Stack>
                  )}
                </Box>
                
                <Grid container spacing={3}>
                  <Grid item xs={12} sm={6}>
                    <TextField
                      label="First Name"
                      name="firstName"
                      value={profileData.firstName}
                      onChange={handleInputChange}
                      fullWidth
                      disabled={!isEditing}
                      variant="outlined"
                    />
                  </Grid>
                  <Grid item xs={12} sm={6}>
                    <TextField
                      label="Last Name"
                      name="lastName"
                      value={profileData.lastName}
                      onChange={handleInputChange}
                      fullWidth
                      disabled={!isEditing}
                      variant="outlined"
                    />
                  </Grid>
                  <Grid item xs={12}>
                    <TextField
                      label="Email"
                      name="email"
                      type="email"
                      value={profileData.email}
                      onChange={handleInputChange}
                      fullWidth
                      disabled={!isEditing}
                      variant="outlined"
                      InputProps={{
                        startAdornment: <EmailIcon color="action" sx={{ mr: 1 }} />
                      }}
                    />
                  </Grid>
                  <Grid item xs={12}>
                    <TextField
                      label="Bio"
                      name="bio"
                      value={profileData.bio}
                      onChange={handleInputChange}
                      fullWidth
                      multiline
                      rows={4}
                      disabled={!isEditing}
                      variant="outlined"
                    />
                  </Grid>
                  <Grid item xs={12} sm={6}>
                    <TextField
                      label="Phone"
                      name="phone"
                      value={profileData.phone}
                      onChange={handleInputChange}
                      fullWidth
                      disabled={!isEditing}
                      variant="outlined"
                      InputProps={{
                        startAdornment: <PhoneIcon color="action" sx={{ mr: 1 }} />
                      }}
                    />
                  </Grid>
                  <Grid item xs={12} sm={6}>
                    <TextField
                      label="Location"
                      name="location"
                      value={profileData.location}
                      onChange={handleInputChange}
                      fullWidth
                      disabled={!isEditing}
                      variant="outlined"
                      InputProps={{
                        startAdornment: <LocationIcon color="action" sx={{ mr: 1 }} />
                      }}
                    />
                  </Grid>
                </Grid>
              </Box>
            </TabPanel>
            
            <TabPanel value={value} index={1}>
              <Card elevation={0} sx={{ p: 2, bgcolor: 'background.paper', border: '1px solid', borderColor: 'divider' }}>
                <Typography variant="h6" gutterBottom>
                  Change Password
                </Typography>
                <Grid container spacing={3}>
                  <Grid item xs={12}>
                    <TextField
                      type="password"
                      label="Current Password"
                      fullWidth
                      variant="outlined"
                    />
                  </Grid>
                  <Grid item xs={12}>
                    <TextField
                      type="password"
                      label="New Password"
                      fullWidth
                      variant="outlined"
                    />
                  </Grid>
                  <Grid item xs={12}>
                    <TextField
                      type="password"
                      label="Confirm New Password"
                      fullWidth
                      variant="outlined"
                    />
                  </Grid>
                  <Grid item xs={12}>
                    <Button variant="contained" color="primary">
                      Update Password
                    </Button>
                  </Grid>
                </Grid>
              </Card>
            </TabPanel>
            
            <TabPanel value={value} index={2}>
              <Card elevation={0} sx={{ p: 4, bgcolor: 'background.paper', border: '1px solid', borderColor: 'divider', textAlign: 'center' }}>
                <NotificationsIcon sx={{ fontSize: 60, color: 'text.secondary', mb: 2, opacity: 0.5 }} />
                <Typography variant="h6" gutterBottom>
                  Notification Preferences
                </Typography>
                <Typography variant="body1" color="text.secondary" paragraph>
                  Manage how you receive notifications and alerts from the dashboard.
                </Typography>
                <Button variant="outlined" disabled>
                  Coming Soon
                </Button>
              </Card>
            </TabPanel>
          </Card>
        </Grid>
      </Grid>
    </Container>
  );
}
